pred=predict(tslm(CPI~trend + season), tn, se.fit = TRUE)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = predict(tslm(CPI~trend + season),tn, level =0.95, interval="prediction")
#fit_full_pred <- predict(fit_full, 24, prediction.interval = TRUE,level=0.95)
#plot(fit_full_pred,ylab="y",xlab="Time")
length(fit_full)
tn=data.frame(t=seq(2018,2020))
pred=forecast(tslm(CPI~trend + season), newdata = tn, se.fit = TRUE)
tn=data.frame(t=seq(2018,2020))
pred=forecast(tslm(CPI~trend + season), newdata = tn)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = forecast(tslm(CPI~trend + season),tn, level =0.95, interval="prediction")
tn=data.frame(t=seq(2018,2020))
pred=forecast(tslm(CPI~trend + season), newdata = tn)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = forecast(tslm(CPI~trend + season),tn, level =0.95)
#fit_full_pred <- predict(fit_full, 24, prediction.interval = TRUE,level=0.95)
#plot(fit_full_pred,ylab="y",xlab="Time")
pred.plim
tn=data.frame(t=seq(2018,2020))
pred=forecast(tslm(CPI~trend + season), newdata = tn)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = forecast(tslm(CPI~trend + season),tn, level =0.95)
#fit_full_pred <- predict(fit_full, 24, prediction.interval = TRUE,level=0.95)
plot(tn$t, pred.plim,ylab="y",xlab="Time")
tn=data.frame(t=seq(2018,2020))
pred=forecast(tslm(CPI~trend + season), newdata = tn)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = forecast(tslm(CPI~trend + season),tn, level =0.95)
#fit_full_pred <- predict(fit_full, 24, prediction.interval = TRUE,level=0.95)
plot(tn$t, pred.plim[1],ylab="y",xlab="Time")
tn=data.frame(t=seq(2018,2020))
pred=forecast(tslm(CPI~trend + season), newdata = tn)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = forecast(tslm(CPI~trend + season),tn, level =0.95)
#fit_full_pred <- predict(fit_full, 24, prediction.interval = TRUE,level=0.95)
plot(tn$t, pred.plim[1:3],ylab="y",xlab="Time")
tn=data.frame(t=seq(2018,2020))
pred=forecast(tslm(CPI~trend + season), newdata = tn)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = forecast(tslm(CPI~trend + season),tn, level =0.95)
#fit_full_pred <- predict(fit_full, 24, prediction.interval = TRUE,level=0.95)
matplot(tn$t, pred.plim,ylab="y",xlab="Time")
pred.plim
pred.plim[1]
pred.plim[2]
pred.plim[3]
pred.plim[4]
pred.plim[5]
pred.plim[6]
#fit_full_pred <- predict(fit_full, 24, prediction.interval = TRUE,level=0.95)
matplot(tn$t, pred.plim[6],ylab="y",xlab="Time")
tn=data.frame(t=seq(2018,2020))
pred=forecast(tslm(CPI~trend + season), newdata = tn)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = forecast(tslm(CPI~trend + season),tn, level =0.95)
#fit_full_pred <- predict(fit_full, 24, prediction.interval = TRUE,level=0.95)
matplot(tn$t, pred.plim[6],ylab="y",xlab="Time")
plot(forecast(fit_full,h=60),main="Model 3: Forecast Trend + Seasonality")
lines(fit_full$fitted.values, col="red")
#***********************************************
# Randall R. Rojas
# Email: rrojas@econ.ucla.edu
# Date: 04/20/2015
# Comment(s): R code example for fitting/forecasting a seasonality to ts data.
# Data File(s): beer.csv, and housing.dat
#***********************************************
# Variable Definitions
# beer = monthly beer production in Australia from Jan 1956 - Aug 1995
# house = monthly housing starts from 1946 to 1993
#************************************************
# Set your 'working directory' to the folder where all the data and respective codes are located.
#setwd("/Users/DrDrR4/Documents/Courses/2015/Spring/Econ144/R_Codes")
# Clear all variables and prior sessions
rm(list=ls(all=TRUE))
# Load Libraries
library(lattice)
library(foreign)
library(MASS)
library(car)
require(stats)
require(stats4)
library(KernSmooth)
library(fastICA)
library(cluster)
library(leaps)
library(mgcv)
library(rpart)
library(pan)
library(mgcv)
library(DAAG)
library("TTR")
library(tis)
require("datasets")
require(graphics)
library("forecast")
#install.packages("astsa")
#require(astsa)
library(RColorBrewer)
library(plotrix)
library(nlstools)
# Basic Seasonality Example using 'tslm'
y =ts(rnorm(120,0,3) + 20*sin(2*pi*(1:120)/12), frequency=12)
fit1=tslm(y ~ trend )
fit2=tslm(y ~ season)
fit3=tslm(y ~ trend+ season)
quartz()
par(mfrow=c(3,1))
plot(y,main="Time Series Data: Trend")
lines(fit1$fitted.values, col="red")
plot(y,main="Time Series Data: Seasonality")
lines(fit2$fitted.values, col="red")
plot(y,main="Time Series Data: Trend + Seasonality")
lines(fit3$fitted.values, col="red")
# Read in the beer data into a data file
beer=read.csv("beer.csv",header=T,dec=",",sep=";")
beer=ts(beer[,1],start=1956,freq=12)
# Lets look at the beer data once again:
beer=read.csv("beer.csv",header=T,dec=",",sep=";")
beer=ts(beer[,1],start=1956,freq=12)
lbeer<-log(beer)
# Compare 3 different fit models:
fit1=tslm(lbeer ~ trend)
fit2=tslm(lbeer ~ season)
fit3=tslm(lbeer ~ trend + season)
quartz()
par(mfrow=c(3,1))
plot(lbeer,main="Time Series Data: Trend")
lines(fit1$fitted.values, col="red")
plot(lbeer,main="Time Series Data: Seasonality")
lines(fit2$fitted.values, col="red")
plot(lbeer,main="Time Series Data: Trend + Seasonality")
lines(fit3$fitted.values, col="red")
AIC(fit1,fit2,fit3)
BIC(fit1,fit2,fit3)
# Compute forecasts based on the 3 fit models:
quartz()
par(mfrow=c(3,1))
plot(forecast(fit1,h=60),main="Model 1: Forecast Trend")
lines(fit1$fitted.values, col="red")
plot(forecast(fit2,h=60),main="Model 2: Forecast Seasonality")
lines(fit2$fitted.values, col="red")
plot(forecast(fit3,h=60),main="Model 3: Forecast Trend + Seasonality")
lines(fit3$fitted.values, col="red")
# The forecast above can be improved considerably via 'ets'
fit=ets(lbeer)
quartz()
plot(fit)
accuracy(fit)
plot(forecast(fit,level=c(50,80,95)))
#Plot the seasonal factors:
quartz()
fit=tslm(lbeer ~ season+0)
plot(fit$coef,type='l',ylab='Seasonal Factors', xlab="Season",lwd=2, main="Plot of Seasonal Factors")
#--------Book Example: Housing Starts----------------
house<-read.table("housing.dat")
housets<-ts(house[,1],start=1946,freq=12)
t<-seq(1946,1993.12,length=length(housets))
quartz()
plot(housets)
quartz()
plot(housets[200:256],type="l") #zoom in
# Seasonal Decomposition of Time Series by Loess
quartz()
plot(stl(housets,s.window="periodic"))
forecast(housets)
summary(forecast(housets))
fit1=tslm(housets ~ trend + season+0)
fit2=tslm(housets ~ trend+0)
fit3=tslm(housets ~ season)
quartz()
par(mfrow=c(3,1))
plot(forecast(fit1,h=24),main="Model 1: Forecast Trend + Seasonality")
lines(fit1$fitted.values,col="red")
plot(forecast(fit2,h=24),main="Model 2: Forecast Trend Only")
lines(fit2$fitted.values,col="red")
plot(forecast(fit3,h=24),main="Model 2: Forecast Seasonality Only")
lines(fit3$fitted.values,col="red")
AIC(fit1,fit2,fit3)
BIC(fit1,fit2,fit3)
#Plot the seasonal factors:
quartz()
par(mfrow=c(2,1))
plot(fit3$coef,type='l',ylab='Seasonal Factors', xlab="Season",lwd=2, main="Plot of Seasonal Factors")
hist(fit3$res,main="Histogram of Residuals",col="skyblue3")
# We can improve the forecast using ets
quartz()
plot(housets,s.window="periodic")
forecast(housets)
plot(forecast(housets))
fit=ets(housets)
quartz()
plot(fit)
accuracy(fit)
plot(forecast(fit,level=c(50,80,95),h=12))
plot(forecast(fit3,h=24),main="Model 2: Forecast Seasonality Only")
lines(fit3$fitted.values,col="red")
windows()
plot(forecast(fit3,h=24),main="Model 2: Forecast Seasonality Only")
lines(fit3$fitted.values,col="red")
windows()
par(mfrow=c(2,1))
plot(fit3$coef,type='l',ylab='Seasonal Factors', xlab="Season",lwd=2, main="Plot of Seasonal Factors")
hist(fit3$res,main="Histogram of Residuals",col="skyblue3")
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/Lenovo/Desktop/Econ 144/Project 1")
rm(list=ls(all=TRUE))
library(lattice)
library(foreign)
library(MASS)
library(car)
require(stats)
require(stats4)
library(KernSmooth)
library(fastICA)
library(cluster)
library(leaps)
library(mgcv)
library(rpart)
library(pan)
library(mgcv)
library(DAAG)
library(tis)
require(datasets)
require(graphics)
library("forecast")
#require(astsa)
#library(xtable)
#library(stats)
#Obtain the data, clean it and construct the time series for the CPI
data = read.csv("Consumer Price Index for All Urban Consumers Purchasing Power of the Consumer Dollar 1950_1-2018_1.csv")
colnames(data)[2] = "CPI"
attach(data)
CPI_ts = ts(CPI, start = 1950, freq = 12)
#Plotting both the time series of the CPI and it's difference
plot(CPI_ts)
CPI_ts_diff = diff(log(CPI_ts))
plot(CPI_ts_diff)
#Plotting the ACF and the PACF of the time series
acf(CPI_ts)
pacf(CPI)
#we regress CPI_ts with a linear model and nonlinear models such as quadratic, logatithmatic and exponential and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
y2 = lm(CPI_ts~t+I(t^2))
y3=lm(log(CPI_ts) ~ t)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
y5=lm(CPI_ts ~ log(t))
matplot(t, cbind(y1$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(y3$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), xlab = "Time", ylab = "Values")
title(main = "Exponential model")
matplot(t, cbind(y5$fitted.values, CPI), xlab = "Time", ylab = "Values")
title(main = "Linear-log model")
plot(resid(y1), fitted(y1), xlab = "Residuals",
ylab = "Fitted Values", main = "Linear model",
pch = 19, col = "navyblue")
plot(resid(y2), fitted(y2), xlab = "Residuals",
ylab = "Fitted Values", main = "Quadratic model",
pch = 19, col = "navyblue")
plot(resid(y3), fitted(y3), xlab = "Residuals",
ylab = "Fitted Values", main = "Log-linear model",
pch = 19, col = "navyblue")
plot(resid(y4), fitted(y3), xlab = "Residuals",
ylab = "Fitted Values", main = "Exponential model",
pch = 19, col = "navyblue")
plot(resid(y5), fitted(y3), xlab = "Residuals",
ylab = "Fitted Values", main = "Linear-log model",
pch = 19, col = "navyblue")
truehist(resid(y1), main = "Residuals", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y2), main = "Residuals", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y3), main = "Residuals", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y4), main = "Residuals", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y5), main = "Residuals", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
summary(y1)
summary(y2)
summary(y3)
summary(y4)
summary(y5)
#Run a time series regression on the season and show the results
fit_season=tslm(CPI_ts ~ season)
summary(fit_season)
#Plotting the season factors
plot(fit_season$coef,type='l',ylab='Seasonal Factors', xlab="Season",lwd=2, main="Plot of Seasonal Factors")
#First construct the time series regression model for both the trend and season
#Then plot the residuals vs fitted values graphs
fit_full = tslm(log(CPI_ts) ~ trend + season, start = 1950, freq = 12)
plot(fit_full$residuals,fit_full$fitted.values, main = "Residuals vs Fitted values", xlab = "Residuals", ylab = "Fitted values")
#Producing the summary of the regression
summary(fit_full)
#Plotting the forecast of the data using the full model
plot(forecast(fit_full,h=60),main="Forecast Trend + Seasonality")
lines(fit_full$fitted.values, col="red")
#Plotting the ets of the CPI_ts and finding the accuracy
fit_ets = ets(CPI_ts)
plot(fit_ets)
accuracy(fit_ets)
plot(forecast(fit_ets,level=c(50,80,95)))
#Plotting the forecast of the data using the full model
plot(forecast(fit_full,h=60),main="Forecast Trend + Seasonality")
#lines(fit_full$fitted.values, col="red")
#Plotting the ets of the CPI_ts and finding the accuracy
fit_ets = ets(CPI_ts)
plot(fit_ets)
accuracy(fit_ets)
plot(forecast(fit_ets,level=c(50,80,95)))
tn=data.frame(t=seq(2018,2023))
pred=predict(fit_full, tn, se.fit = TRUE)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = predict(fit_full,tn, level =0.95, interval="prediction")
pred.clim = predict(lm(female_ts~t+I(t^2)), tn,level=0.95, interval="confidence")
tn=data.frame(t=seq(2018,2023))
pred=predict(fit_full, tn, se.fit = TRUE)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = predict(fit_full,tn, level =0.95, interval="prediction")
pred.clim = predict(fit_full, tn,level=0.95, interval="confidence")
matplot(tn$t,cbind(pred.clim, pred.plim[,-1]),
lty=c(1,2,2,3,3), type="l", lwd=2, ylab="predicted y",xlab="Time", col =         c("red", "black", "black", "blue","blue"))
length(tn$t)
length(pred.clim(:,1))
length(pred.clim[:,1])
length(pred.clim[:,1])
pred.clim
pred.clim$fitted.value
pred.clim$fit4
pred.clim$fit
pred.clim(1)
pred.clim[1]
pred.clim[:1]
pred.clim[:,1]
pred.clim[,1]
tn=data.frame(t=seq(2018,2023))
pred=predict(fit_full, tn, se.fit = TRUE)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = predict(fit_full,tn, level =0.95, interval="prediction")
pred.clim = predict(fit_full, tn,level=0.95, interval="confidence")
time = seq(from = 2018, to = 2023, length = length(pred.plim[,1]))
matplot(time,cbind(pred.clim, pred.plim[,-1]),
lty=c(1,2,2,3,3), type="l", lwd=2, ylab="predicted y",xlab="Time", col =         c("red", "black", "black", "blue","blue"))
title(main = "Predicted value vs Time")
legend("topright", legend = c("Prediction interval", "Confidence Interval", "Forecasted fit"), lty = c(3,2,1), col = c("blue", "black", "red"))
#Plotting the forecast of the data using the full model
plot(forecast(fit_full,h=60),main="Forecast Trend + Seasonality")
#lines(fit_full$fitted.values, col="red")
#Plotting the ets of the CPI_ts and finding the accuracy
fit_ets = ets(CPI_ts)
plot(fit_ets)
accuracy(fit_ets)
plot(forecast(fit_ets,level=c(50,80,95)))
tn=data.frame(t=seq(2018,2023))
pred=predict(fit_full, tn, se.fit = TRUE)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = predict(fit_full,tn, level =0.95, interval="prediction")
pred.clim = predict(fit_full, tn,level=0.95, interval="confidence")
time = seq(from = 2018, to = 2023, length = length(pred.plim[,1]))
matplot(time,cbind(pred.clim, pred.plim[,-1]),
lty=c(1,2,2,3,3), type="l", lwd=2, ylab="predicted y",xlab="Time", col =         c("red", "black", "black", "blue","blue"))
title(main = "Predicted value vs Time")
legend("topright", legend = c("Prediction interval", "Confidence Interval", "Forecasted fit"), lty = c(3,2,1), col = c("blue", "black", "red"))
#Plotting the forecast of the data using the full model
plot(forecast(fit_full,h=60),main="Forecast Trend + Seasonality", xlim = clim(2018,2023))
tn=data.frame(t=seq(2018,2023))
pred=predict(fit_full, tn, se.fit = TRUE)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = predict(fit_full,tn, level =0.95, interval="prediction")
pred.clim = predict(fit_full, tn,level=0.95, interval="confidence")
time = seq(from = 2018, to = 2023, length = length(pred.plim[,1]))
matplot(time,cbind(pred.clim, pred.plim[,-1]),
lty=c(1,2,2,3,3), type="l", lwd=2, ylab="predicted y",xlab="Time", col =         c("red", "black", "black", "blue","blue"))
title(main = "Predicted value vs Time")
legend("topright", legend = c("Prediction interval", "Confidence Interval", "Forecasted fit"), lty = c(3,2,1), col = c("blue", "black", "red"))
#Plotting the forecast of the data using the full model
plot(forecast(fit_full,h=60),main="Forecast Trend + Seasonality", xlim = c(2018,2023))
#lines(fit_full$fitted.values, col="red")
#Plotting the ets of the CPI_ts and finding the accuracy
fit_ets = ets(CPI_ts)
plot(fit_ets)
accuracy(fit_ets)
plot(forecast(fit_ets,level=c(50,80,95)))
```{r}
tn=data.frame(t=seq(2018,2023))
pred=predict(fit_full, tn, se.fit = TRUE)
#plot(c(male_ts,pred$fit),type='l',xlim=c(1940,2000))
pred.plim = predict(fit_full,tn, level =0.95, interval="prediction")
pred.clim = predict(fit_full, tn,level=0.95, interval="confidence")
time = seq(from = 2018, to = 2023, length = length(pred.plim[,1]))
matplot(time,cbind(pred.clim, pred.plim[,-1]),
lty=c(1,2,2,3,3), type="l", lwd=2, ylab="predicted y",xlab="Time", col =         c("red", "black", "black", "blue","blue"))
title(main = "Predicted value vs Time")
legend("topright", legend = c("Prediction interval", "Confidence Interval", "Forecasted fit"), lty = c(3,2,1), col = c("blue", "black", "red"))
#Plotting the forecast of the data using the full model
plot(forecast(fit_full,h=60),main="Forecast Trend + Seasonality")
#lines(fit_full$fitted.values, col="red")
#Plotting the ets of the CPI_ts and finding the accuracy
fit_ets = ets(CPI_ts)
plot(fit_ets)
accuracy(fit_ets)
plot(forecast(fit_ets,level=c(50,80,95)))
help forecast
help (forecast)
#Plotting both the time series of the CPI and it's difference
plot(CPI_ts, main = "Plot of time series of CPI values", ylab = "CPI")
CPI_ts_diff = diff(log(CPI_ts))
plot(CPI_ts_diff, main = "Plot of time series of CPI percentage change", ylab = "CPI percentage change")
#we regress time series of the CPI with a linear model and nonlinear models such as quadratic, logatithmatic, exponential, log-linear, and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
y2 = lm(CPI_ts~t+I(t^2))
y3=lm(log(CPI_ts) ~ t)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
y5=lm(CPI_ts ~ log(t))
matplot(t, cbind(y1$fitted.values, CPI), type = 'l', xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
matplot(t, cbind(y2$fitted.values, CPI), type = 'l', xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(y3$fitted.values, CPI), type = 'l',xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), type = 'l',xlab = "Time", ylab = "Values")
title(main = "Exponential model")
matplot(t, cbind(y5$fitted.values, CPI), type = 'l',xlab = "Time", ylab = "Values")
title(main = "Linear-log model")
#we regress time series of the CPI with a linear model and nonlinear models such as quadratic, logatithmatic, exponential, log-linear, and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
y2 = lm(CPI_ts~t+I(t^2))
y3=lm(log(CPI_ts) ~ t)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
y5=lm(CPI_ts ~ log(t))
matplot(t, cbind(y1$fitted.values, CPI), type = 'l', xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
legend("topright", legend = c("Time Series Values", "Regression fitted values"), col = c("red", "black"), lty = c(2,1))
matplot(t, cbind(y2$fitted.values, CPI), type = 'l', xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
matplot(t, cbind(y3$fitted.values, CPI), type = 'l',xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), type = 'l',xlab = "Time", ylab = "Values")
title(main = "Exponential model")
matplot(t, cbind(y5$fitted.values, CPI), type = 'l',xlab = "Time", ylab = "Values")
title(main = "Linear-log model")
#we regress time series of the CPI with a linear model and nonlinear models such as quadratic, logatithmatic, exponential, log-linear, and then plot the graphs
t = seq(1950, 2018, length = length(CPI_ts))
y1 = lm(CPI_ts~t)
y2 = lm(CPI_ts~t+I(t^2))
y3=lm(log(CPI_ts) ~ t)
ds=data.frame(x=t, y=CPI_ts)
y4=nls(y ~ exp(a + b * t),data=ds, start = list(a = 0, b = 0))
y5=lm(CPI_ts ~ log(t))
matplot(t, cbind(y1$fitted.values, CPI), type = 'l', xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Linear model")
legend("topright", legend = c("Time Series Values", "Regression fitted values"), col = c("red", "black"), lty = c(2,1))
matplot(t, cbind(y2$fitted.values, CPI), type = 'l', xlab = "Time", ylab = "Values", lwd = 0.1)
title(main = "Quadratic model")
legend("topright", legend = c("Time Series Values", "Regression fitted values"), col = c("red", "black"), lty = c(2,1))
matplot(t, cbind(y3$fitted.values, CPI), type = 'l',xlab = "Time", ylab = "Values")
title(main = "Log-linear model")
legend("topright", legend = c("Time Series Values", "Regression fitted values"), col = c("red", "black"), lty = c(2,1))
matplot(t, cbind(predict(y4, list(x = ds$x)), CPI), type = 'l',xlab = "Time", ylab = "Values")
title(main = "Exponential model")
legend("topright", legend = c("Time Series Values", "Regression fitted values"), col = c("red", "black"), lty = c(2,1))
matplot(t, cbind(y5$fitted.values, CPI), type = 'l',xlab = "Time", ylab = "Values")
title(main = "Linear-log model")
legend("topright", legend = c("Time Series Values", "Regression fitted values"), col = c("red", "black"), lty = c(2,1))
truehist(resid(y1), main = "Linear", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y2), main = "Quadratic", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y3), main = "Log-linear", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y4), main = "Exponential", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
truehist(resid(y5), main = "Linear-log", col = "slategrey",
xlab = "Residuals", ylab = "Standardized Unit")
#Calculating the AIC and the BIC of the models
AIC(y1,y2,y3,y4,y5)
BIC(y1,y2,y3,y4,y5)
#Plotting the fitted values, Confidence and Prediction intervals
time <- data.frame(t = seq(2018,2023))
pred <- predict(lm(CPI~t), time, se.fit = TRUE)
pred_interval <- predict(lm(log(CPI)~t), time, level = .95, interval = "prediction")
conf_interval <- predict(lm(log(CPI)~t), time, level = .95, interval = "confidence")
matplot(time$t, cbind(conf_interval, pred_interval[,-1]), lty = c(1,1,1,3,3),col = c("black", "blue", "blue", "red", "red"), type = "l", lwd = 2, ylab = "Predicted CPI", xlab = "Time", main = "Confidence and Prediction Intervals")
legend("topleft", legend = c("Confidence Interval", "Prediction Interval", "Fit"), col = c("red", "blue", "black"), lty = c(2,1,1), cex = .8)
#First construct the time series regression model for both the trend and season
#Then plot the residuals vs fitted values graphs
fit_full = tslm(log(CPI_ts) ~ trend + season)
plot(fit_full$residuals,fit_full$fitted.values, main = "Residuals vs Fitted values", xlab = "Residuals", ylab = "Fitted values")
#Plotting the forecast of the data using the full model
plot(forecast(fit_full,h=60),main="Forecast Trend + Seasonality")
lines(fit_full$fitted.values, col="red")
#Plotting the ets of the CPI_ts and finding the accuracy
fit_ets = ets(CPI_ts)
plot(fit_ets)
accuracy(fit_ets)
plot(forecast(fit_ets,level=c(50,80,95)))
setwd("/Users/Lenovo/Desktop/Khazanah/Productivity Convergence/Employ")
rm(list = ls(all = T))
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(xlsx)
