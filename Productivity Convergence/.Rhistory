T = 2016 - 2010
initYear = 6
lastYear = nrow(dataAgri)
#Agriculture
AveGrowth = t((1/T)*(log((dataAgri[lastYear,2:ncol(dataAgri)]/dataAgri[initYear,2:ncol(dataAgri)]))))
init = t(as.vector(log(dataAgri[initYear,2:ncol(dataAgri)])))
ds=data.frame(x=init, y=AveGrowth)
model = nls(AveGrowth~a+b*init, start = list(a = 1, b = 1))
summary(model)
View(ds)
View(dataAgri)
View(dataAgri)
T = 2016 - 2010
initYear = 6
lastYear = nrow(dataAgri)
#Agriculture
AveGrowth = t((1/T)*(log((dataAgri[lastYear,2:ncol(dataAgri)]/dataAgri[initYear,2:ncol(dataAgri)]))))
init = t(log(dataAgri[initYear,2:ncol(dataAgri)]))
ds=data.frame(x=init, y=AveGrowth)
model = nls(AveGrowth~a+b*init, start = list(a = 1, b = 1))
summary(model)
nrow(dataAgri)
AveGrowth = t((1/T)*(log((dataManu[lastYear,2:ncol(dataManu)]/dataManu[initYear,2:ncol(dataManu)]))))
init = t(as.vector(log(dataManu[initYear,2:ncol(dataManu)])))
ds=data.frame(x=init, y=AveGrowth)
model = nls(AveGrowth~a+b*init, start = list(a = 1, b = 1))
summary(model)
AveGrowth = t((1/T)*(log((dataCon[lastYear,2:ncol(dataCon)]/dataCon[initYear,2:ncol(dataCon)]))))
init = t(as.vector(log(dataCon[initYear,2:ncol(dataCon)])))
ds=data.frame(x=init, y=AveGrowth)
model = nls(AveGrowth~a+b*init, start = list(a = 1, b = 1))
summary(model)
AveGrowth = t((1/T)*(log((dataFin[lastYear,2:ncol(dataFin)]/dataFin[initYear,2:ncol(dataFin)]))))
init = t(as.vector(log(dataFin[initYear,2:ncol(dataFin)])))
ds=data.frame(x=init, y=AveGrowth)
model = nls(AveGrowth~a+b*init, start = list(a = 1, b = 1))
summary(model)
AveGrowth = t((1/T)*(log((dataGov[lastYear,2:ncol(dataGov)]/dataGov[initYear,2:ncol(dataGov)]))))
init = t(as.vector(log(dataGov[initYear,2:ncol(dataGov)])))
ds=data.frame(x=init, y=AveGrowth)
model = nls(AveGrowth~a+b*init, start = list(a = 1, b = 1))
summary(model)
AveGrowth = t((1/T)*(log((dataMine[lastYear,2:ncol(dataMine)]/dataMine[initYear,2:ncol(dataMine)]))))
init = t(as.vector(log(dataMine[initYear,2:ncol(dataMine)])))
ds=data.frame(x=init, y=AveGrowth)
model = nls(AveGrowth~a+b*init, start = list(a = 1, b = 1))
summary(model)
AveGrowth = t((1/T)*(log((dataOther[lastYear,2:ncol(dataOther)]/dataOther[initYear,2:ncol(dataOther)]))))
init = t(as.vector(log(dataOther[initYear,2:ncol(dataOther)])))
ds=data.frame(x=init, y=AveGrowth)
model = nls(AveGrowth~a+b*init, start = list(a = 1, b = 1))
summary(model)
AveGrowth = t((1/T)*(log((dataTSC[lastYear,2:ncol(dataTSC)]/dataTSC[initYear,2:ncol(dataTSC)]))))
init = t(as.vector(log(dataTSC[initYear,2:ncol(dataTSC)])))
ds=data.frame(x=init, y=AveGrowth)
model = nls(AveGrowth~a+b*init, start = list(a = 1, b = 1))
summary(model)
AveGrowth = t((1/T)*(log((dataWhole[lastYear,2:ncol(dataWhole)]/dataWhole[initYear,2:ncol(dataWhole)]))))
init = t(as.vector(log(dataWhole[initYear,2:ncol(dataWhole)])))
ds=data.frame(x=init, y=AveGrowth)
model = nls(AveGrowth~a+b*init, start = list(a = 1, b = 1))
summary(model)
#Agriculture
dataAgri = read.csv("ag.csv", header = T)
setwd("/Users/Lenovo/Desktop/Khazanah/Productivity Convergence")
dataAgri = read.csv("ag.csv", header = T)
#Agriculture
AveGrowth = t((1/T)*(log((dataAgri[lastYear,2:ncol(dataAgri)]/dataAgri[initYear,2:ncol(dataAgri)]))))
init = t(log(dataAgri[initYear,2:ncol(dataAgri)]))
ds=data.frame(x=init, y=AveGrowth)
model = nls(AveGrowth~a+b*init, start = list(a = 1, b = 1))
summary(model)
#Manufacturing
AveGrowth = t((1/T)*(log((dataManu[lastYear,2:ncol(dataManu)]/dataManu[initYear,2:ncol(dataManu)]))))
init = t(as.vector(log(dataManu[initYear,2:ncol(dataManu)])))
ds=data.frame(x=init, y=AveGrowth)
model = nls(AveGrowth~a+b*init, start = list(a = 1, b = 1))
summary(model)
#Construction
AveGrowth = t((1/T)*(log((dataCon[lastYear,2:ncol(dataCon)]/dataCon[initYear,2:ncol(dataCon)]))))
init = t(as.vector(log(dataCon[initYear,2:ncol(dataCon)])))
ds=data.frame(x=init, y=AveGrowth)
model = nls(AveGrowth~a+b*init, start = list(a = 1, b = 1))
summary(model)
#Finance
AveGrowth = t((1/T)*(log((dataFin[lastYear,2:ncol(dataFin)]/dataFin[initYear,2:ncol(dataFin)]))))
init = t(as.vector(log(dataFin[initYear,2:ncol(dataFin)])))
ds=data.frame(x=init, y=AveGrowth)
model = nls(AveGrowth~a+b*init, start = list(a = 1, b = 1))
summary(model)
#Government
AveGrowth = t((1/T)*(log((dataGov[lastYear,2:ncol(dataGov)]/dataGov[initYear,2:ncol(dataGov)]))))
init = t(as.vector(log(dataGov[initYear,2:ncol(dataGov)])))
ds=data.frame(x=init, y=AveGrowth)
model = nls(AveGrowth~a+b*init, start = list(a = 1, b = 1))
summary(model)
#Mining
AveGrowth = t((1/T)*(log((dataMine[lastYear,2:ncol(dataMine)]/dataMine[initYear,2:ncol(dataMine)]))))
init = t(as.vector(log(dataMine[initYear,2:ncol(dataMine)])))
ds=data.frame(x=init, y=AveGrowth)
model = nls(AveGrowth~a+b*init, start = list(a = 1, b = 1))
summary(model)
#Other
AveGrowth = t((1/T)*(log((dataOther[lastYear,2:ncol(dataOther)]/dataOther[initYear,2:ncol(dataOther)]))))
init = t(as.vector(log(dataOther[initYear,2:ncol(dataOther)])))
ds=data.frame(x=init, y=AveGrowth)
model = nls(AveGrowth~a+b*init, start = list(a = 1, b = 1))
summary(model)
#UTSC
AveGrowth = t((1/T)*(log((dataTSC[lastYear,2:ncol(dataTSC)]/dataTSC[initYear,2:ncol(dataTSC)]))))
init = t(as.vector(log(dataTSC[initYear,2:ncol(dataTSC)])))
ds=data.frame(x=init, y=AveGrowth)
model = nls(AveGrowth~a+b*init, start = list(a = 1, b = 1))
summary(model)
#Wholesale
AveGrowth = t((1/T)*(log((dataWhole[lastYear,2:ncol(dataWhole)]/dataWhole[initYear,2:ncol(dataWhole)]))))
init = t(as.vector(log(dataWhole[initYear,2:ncol(dataWhole)])))
ds=data.frame(x=init, y=AveGrowth)
model = nls(AveGrowth~a+b*init, start = list(a = 1, b = 1))
summary(model)
model = nls((1/T)*(log((dataAgri[lastYear,2:ncol(dataAgri)]/dataAgri[initYear,2:ncol(dataAgri)]))),
~a+b*log(dataAgri[initYear,2:ncol(dataAgri)]), start = list(a = 1, b = 1))
summary(model)
model = nls((1/T)*(log((dataAgri[lastYear,2:ncol(dataAgri)]/dataAgri[initYear,2:ncol(dataAgri)])))~a+b*log(dataAgri[initYear,2:ncol(dataAgri)]), start = list(a = 1, b = 1))
summary(model)
(1/T)*(log((dataAgri[lastYear,2:ncol(dataAgri)]/dataAgri[initYear,2:ncol(dataAgri)])))
model = nls(t((1/T)*(log((dataAgri[lastYear,2:ncol(dataAgri)]/dataAgri[initYear,2:ncol(dataAgri)]))))~a+b*t(log(dataAgri[initYear,2:ncol(dataAgri)])), start = list(a = 1, b = 1))
summary(model)
model = nls(AveGrowth~a+b*init, start = list(a = 1, b = 1))
summary(model)
dataAgri = read.csv("ag.csv", header = T)
AveGrowth = t((1/T)*(log((dataAgri[lastYear,2:ncol(dataAgri)]/dataAgri[initYear,2:ncol(dataAgri)]))))
init = t(log(dataAgri[initYear,2:ncol(dataAgri)]))
ds=data.frame(x=last, y=AveGrowth)
model = nls(AveGrowth~a+b*init, start = list(a = 1, b = 1))
summary(model)
EmpAgri[initYear,]
EmpAgri[initYear,-1]
View(EmpAgri)
View(EmpAgri)
AveGrowth = t((1/T)*(log((dataAgri[lastYear,2:ncol(dataAgri)]/dataAgri[initYear,2:ncol(dataAgri)]))))
init = t(log(dataAgri[initYear,2:ncol(dataAgri)]))
model = nls(AveGrowth~a+b*init+c*EmpAgri[initYear,-1], start = list(a = 1, b = 1, c = 1))
summary(model)
AveGrowth = t((1/T)*(log((dataAgri[lastYear,2:ncol(dataAgri)]/dataAgri[initYear,2:ncol(dataAgri)]))))
init = t(log(dataAgri[initYear,2:ncol(dataAgri)]))
employ = t(EmpAgri[initYear,-1])
model = nls(AveGrowth~a+b*init+c*employ, start = list(a = 1, b = 1, c = 1))
summary(model)
employ
employ = t(EmpAgri[initYear,-c(0,1)])
employ
model = nls(AveGrowth~a+b*init+c*employ, start = list(a = 1, b = 1, c = 1))
summary(model)
employ = t(EmpAgri[initYear,2:ncol(dataAgri)])
model = nls(AveGrowth~a+b*init+c*employ, start = list(a = 1, b = 1, c = 1))
summary(model)
AveGrowth
employ
#Productivity
#Agriculture
dataAgri = read.csv("ag.csv", header = T)
#Manufacturing
dataManu = read.csv("manu.csv", header = T)
#Construction
dataCon = read.csv("construc.csv", header = T)
#Finance
dataFin = read.csv("fin.csv", header = T)
#Government
dataGov = read.csv("gov.csv", header = T)
#Mining
dataMine = read.csv("mine.csv", header = T)
#TSC
dataTSC = read.csv("TSC.csv", header = T)
#Wholesale & retail
dataWhole = read.csv("whole.csv", header = T)
#Other
dataOther = read.csv("other.csv", header = T)
#Employment
setwd("/Users/Lenovo/Desktop/Khazanah/Productivity Convergence/Employ")
library(xlsx)
#Agriculture
EmpAgri = read.xlsx("Agriculture.xlsx", header = T, sheetIndex = 1, endRow = 13)
#Manufacturing
EmpManu = read.xlsx("Manufacturing.xlsx", header = T, sheetIndex = 1, endRow = 13)
#Construction
EmpCon = read.xlsx("construction.xlsx", header = T, sheetIndex = 1, endRow = 13)
#Finance
EmpFin = read.xlsx("Finance.xlsx", header = T, sheetIndex = 1, endRow = 13)
#Government
EmpGov = read.xlsx("Government.xlsx", header = T, sheetIndex = 1, endRow = 13)
#Mining
EmpMine = read.xlsx("Mining.xlsx", header = T, sheetIndex = 1, endRow = 13)
#TSC
EmpTSC = read.xlsx("UTSC.xlsx", header = T, sheetIndex = 1, endRow = 13)
#Wholesale & retail
EmpWhole = read.xlsx("Wholesale.xlsx", header = T, sheetIndex = 1, endRow = 13)
#Other
EmpOther = read.xlsx("Other.xlsx", header = T, sheetIndex = 1, endRow = 13)
###
T = 2016 - 2010
initYear = 6
lastYear = nrow(dataAgri)
#Agriculture
AveGrowth = t((1/T)*(log((dataAgri[lastYear,2:ncol(dataAgri)]/dataAgri[initYear,2:ncol(dataAgri)]))))
init = t(log(dataAgri[initYear,2:ncol(dataAgri)]))
employ = t(EmpAgri[initYear,2:ncol(dataAgri)])
model = nls(AveGrowth~a+b*init+c*employ, start = list(a = 1, b = 1, c = 1))
summary(model)
AveGrowth = t((1/T)*(log((dataManu[lastYear,2:ncol(dataManu)]/dataManu[initYear,2:ncol(dataManu)]))))
init = t(log(dataManu[initYear,2:ncol(dataManu)]))
employ = t(EmpManu[initYear,-1])
model = nls(AveGrowth~a+b*init+c*EmpManu[initYear,-1], start = list(a = 1, b = 1, c= 1))
summary(model)
EmpManu[initYear,-1]
employ
init
AveGrowht
AveGrowht
AveGrowth
AveGrowth = t((1/T)*(log((dataManu[lastYear,2:ncol(dataManu)]/dataManu[initYear,2:ncol(dataManu)]))))
init = t(log(dataManu[initYear,2:ncol(dataManu)]))
employ = t(EmpManu[initYear,-1])
model = nls(AveGrowth~a+b*init+c*EmpManu[initYear,-1], start = list(a = 1, b = 1, c= 1))
summary(model)
AveGrowth = t((1/T)*(log((dataManu[lastYear,2:ncol(dataManu)]/dataManu[initYear,2:ncol(dataManu)]))))
init = t(log(dataManu[initYear,2:ncol(dataManu)]))
employ = t(EmpManu[initYear,-1])
model = nls(AveGrowth~a+b*init+c*employ, start = list(a = 1, b = 1, c= 1))
summary(model)
AveGrowth = t((1/T)*(log((dataCon[lastYear,2:ncol(dataCon)]/dataCon[initYear,2:ncol(dataCon)]))))
init = t(as.vector(log(dataCon[initYear,2:ncol(dataCon)])))
employ = t(EmpCons[initYear,-1])
model = nls(AveGrowth~a+b*init+c*employ, start = list(a = 1, b = 1, c = 1))
summary(model)
AveGrowth = t((1/T)*(log((dataCon[lastYear,2:ncol(dataCon)]/dataCon[initYear,2:ncol(dataCon)]))))
init = t(as.vector(log(dataCon[initYear,2:ncol(dataCon)])))
employ = t(EmpCon[initYear,-1])
model = nls(AveGrowth~a+b*init+c*employ, start = list(a = 1, b = 1, c = 1))
summary(model)
AveGrowth = t((1/T)*(log((dataFin[lastYear,2:ncol(dataFin)]/dataFin[initYear,2:ncol(dataFin)]))))
init = t(as.vector(log(dataFin[initYear,2:ncol(dataFin)])))
employ = t(EmpFin[initYear,-1])
model = nls(AveGrowth~a+b*init+c*employ, start = list(a = 1, b = 1, c = 1))
summary(model)
AveGrowth = t((1/T)*(log((dataCon[lastYear,2:ncol(dataCon)]/dataCon[initYear,2:ncol(dataCon)]))))
init = t(as.vector(log(dataCon[initYear,2:ncol(dataCon)])))
employ = t(EmpCon[initYear,-1])
model = nls(AveGrowth~a+b*init+c*employ, start = list(a = 1, b = 1, c = 1))
summary(model)
AveGrowth = t((1/T)*(log((dataGov[lastYear,2:ncol(dataGov)]/dataGov[initYear,2:ncol(dataGov)]))))
init = t(as.vector(log(dataGov[initYear,2:ncol(dataGov)])))
employ = t(EmpGov[initYear,-1])
model = nls(AveGrowth~a+b*init+c*employ, start = list(a = 1, b = 1, c = 1))
summary(model)
AveGrowth = t((1/T)*(log((dataMine[lastYear,2:ncol(dataMine)]/dataMine[initYear,2:ncol(dataMine)]))))
init = t(log(dataMine[initYear,2:ncol(dataMine)]))
employ = t(EmpMine[initYear,-1])
model = nls(AveGrowth~a+b*init+c*employ, start = list(a = 1, b = 1, c= 1))
summary(model)
AveGrowth = t((1/T)*(log((dataOther[lastYear,2:ncol(dataOther)]/dataOther[initYear,2:ncol(dataOther)]))))
init = t(log(dataOther[initYear,2:ncol(dataOther)]))
employ = t(EmpOther[initYear,-1])
model = nls(AveGrowth~a+b*init+c*employ, start = list(a = 1, b = 1, c = 1))
summary(model)
AveGrowth = t((1/T)*(log((dataTSC[lastYear,2:ncol(dataTSC)]/dataTSC[initYear,2:ncol(dataTSC)]))))
init = t(log(dataTSC[initYear,2:ncol(dataTSC)]))
employ = t(EmpTSC[initYear,-1])
model = nls(AveGrowth~a+b*init+c*employ, start = list(a = 1, b = 1, c = 1))
summary(model)
AveGrowth = t((1/T)*(log((dataWhole[lastYear,2:ncol(dataWhole)]/dataWhole[initYear,2:ncol(dataWhole)]))))
init = t(log(dataWhole[initYear,2:ncol(dataWhole)]))
employ = t(EmpWhole[initYear, -1])
model = nls(AveGrowth~a+b*init+c*employ, start = list(a = 1, b = 1, c= 1))
summary(model)
GDPAgri = read.xlsx("agMaster.xlsx", header = F, sheetIndex = 1, startRow = 10,
endRow = 20)
setwd("/Users/Lenovo/Desktop/Khazanah/Productivity Convergence")
GDPAgri = read.xlsx("agMaster.xlsx", header = F, sheetIndex = 1, startRow = 10,
endRow = 20)
View(GDPAgri)
GDPAgri = read.xlsx("agMaster.xlsx", header = F, sheetIndex = 1, startRow = 9,
endRow = 20)
1:6:2
1:2:6
2:2:6
2:3:10
2:1:10
3:10
GDPAgri = read.xlsx("agMaster.xlsx", header = F, sheetIndex = 1, startRow = 9,
endRow = 20, colIndex = c(1,c(T,F)))
seq(1,29)
seq(1,29)[c(T,F)]
asdg = seq(1,29)
asdg[c(T,F)]
asdg[c(TRUE,FALSE)]
seq(1,29)[c(TRUE,FALSE)]
seq(2,29)[c(TRUE,FALSE)]
GDPAgri = read.xlsx("agMaster.xlsx", header = F, sheetIndex = 1, startRow = 9,
endRow = 20, colIndex = c(1,seq(2,29)[c(TRUE,FALSE)]))
View(GDPAgri)
employ = t((1/T)*(EmpAgri[lastYear,-1]-EmpAgri[initYear,-1]/EmpAgri[initYear,-1]))
model = nls(AveGrowth~a+b*init+c*employ, start = list(a = 1, b = 1, c = 1))
AveGrowth = t((1/T)*(log((dataAgri[lastYear,2:ncol(dataAgri)]/dataAgri[initYear,2:ncol(dataAgri)]))))
init = t(log(dataAgri[initYear,2:ncol(dataAgri)]))
employ = t((1/T)*(EmpAgri[lastYear,-1]-EmpAgri[initYear,-1]/EmpAgri[initYear,-1]))
model = nls(AveGrowth~a+b*init+c*employ, start = list(a = 1, b = 1, c = 1))
summary(model)
AveGrowth = t((1/T)*(log((dataManu[lastYear,2:ncol(dataManu)]/dataManu[initYear,2:ncol(dataManu)]))))
init = t(log(dataManu[initYear,2:ncol(dataManu)]))
employ = t((1/T)*(EmpManu[initYear,-1]-EmpManu[initYear,-1]/EmpManu[initYear,-1]))
model = nls(AveGrowth~a+b*init+c*employ, start = list(a = 1, b = 1, c= 1))
summary(model)
AveGrowth = t((1/T)*(log((dataCon[lastYear,2:ncol(dataCon)]/dataCon[initYear,2:ncol(dataCon)]))))
init = t(log(dataCon[initYear,2:ncol(dataCon)]))
employ = t((1/T)*(EmpCon[initYear,-1]-EmpCon[initYear,-1]/EmpMCon[initYear,-1]))
model = nls(AveGrowth~a+b*init+c*employ, start = list(a = 1, b = 1, c = 1))
summary(model)
#Construction
AveGrowth = t((1/T)*(log((dataCon[lastYear,2:ncol(dataCon)]/dataCon[initYear,2:ncol(dataCon)]))))
init = t(log(dataCon[initYear,2:ncol(dataCon)]))
employ = t((1/T)*(EmpCon[initYear,-1]-EmpCon[initYear,-1]/EmpCon[initYear,-1]))
model = nls(AveGrowth~a+b*init+c*employ, start = list(a = 1, b = 1, c = 1))
summary(model)
AveGrowth = t((1/T)*(log((dataFin[lastYear,2:ncol(dataFin)]/dataFin[initYear,2:ncol(dataFin)]))))
init = t(as.vector(log(dataFin[initYear,2:ncol(dataFin)])))
employ = t((1/T)*(EmpFin[initYear,-1]-EmpFin[initYear,-1]/EmpFin[initYear,-1]))
model = nls(AveGrowth~a+b*init+c*employ, start = list(a = 1, b = 1, c = 1))
summary(model)
dataManu = read.xlsx("construcMaster.xlsx", header = F, sheetIndex = 1, startRow = 16,
endRow = 27)
GDPManu = read.xlsx("construcMaster.xlsx", header = F, sheetIndex = 1, startRow = 16,
endRow = 27)
dataManu = read.csv("manu.csv", header = T)
View(GDPManu)
GDPAgri = read.xlsx("agMaster.xlsx", header = F, sheetIndex = 1, startRow = 9,
endRow = 20, colIndex = c(1,seq(2,29)[c(TRUE,FALSE)]))
#Manufacturing
GDPManu = read.xlsx("manuMaster.xlsx", header = F, sheetIndex = 1, startRow = 18,
endRow = 29)
#Construction
GDPCon = read.xlsx("construcMaster.xlsx", header = F, sheetIndex = 1, startRow = 16,
endRow = 27)
#Finance
GDPFin = read.xlsx("finMaster.xlsx", header = F, sheetIndex = 1, startRow = 15,
endRow = 26)
#Government
#dataGov = read.csv("gov.csv", header = T)
#Mining
GDPMine = read.xlsx("mineMaster.xlsx", header = F, sheetIndex = 1, startRow = 15,
endRow = 26)
#TSC
#dataTSC = read.csv("TSC.csv", header = T)
#Wholesale & retail
GDPWhole = read.xlsx("wholeMaster.xlsx", header = F, sheetIndex = 1, startRow = 15,
endRow = 26)
#Other
GDPOther = read.xlsx("otherMaster.xlsx", header = F, sheetIndex = 1, startRow = 15,
endRow = 26)
View(GDPAgri)
AveGrowth = t((1/T)*(log((dataAgri[lastYear,2:ncol(dataAgri)]/dataAgri[initYear,2:ncol(dataAgri)]))))
init = t(log(dataAgri[initYear,2:ncol(dataAgri)]))
employ = t(EmpAgri[initYear,-1])
GDP = GDPAgri[initYear, -1]
model = nls(AveGrowth~a+b*init+c*employ+d*GDP, start = list(a = 1, b = 1, c = 1,d=1))
summary(model)
GDP
GDPAgri
GDP
View(GP)
View(GDP)
AveGrowth = t((1/T)*(log((dataAgri[lastYear,2:ncol(dataAgri)]/dataAgri[initYear,2:ncol(dataAgri)]))))
init = t(log(dataAgri[initYear,2:ncol(dataAgri)]))
employ = t(EmpAgri[initYear,-1])
GDP = t(GDPAgri[initYear, -1])
model = nls(AveGrowth~a+b*init+c*employ+d*GDP, start = list(a = 1, b = 1, c = 1,d=1))
summary(model)
View(employ)
View(AveGrowht)
View(AveGrowth)
employ = t(EmpAgri[initYear,-c(1,15)])
View(employ)
AveGrowth = t((1/T)*(log((dataAgri[lastYear,2:ncol(dataAgri)]/dataAgri[initYear,2:ncol(dataAgri)]))))
init = t(log(dataAgri[initYear,2:ncol(dataAgri)]))
employ = t(EmpAgri[initYear,-c(1,15)])
GDP = t(GDPAgri[initYear, -1])
model = nls(AveGrowth~a+b*init+c*employ+ d*GDP, start = list(a = 1, b = 1, c = 1,d=1))
summary(model)
AveGrowth = t((1/T)*(log((dataManu[lastYear,2:ncol(dataManu)]/dataManu[initYear,2:ncol(dataManu)]))))
init = t(log(dataManu[initYear,2:ncol(dataManu)]))
employ = t(EmpManu[initYear,-1])
GDP = t(GDPManu[initYear, -1])
model = nls(AveGrowth~a+b*init+c*employ+ d*GDP, start = list(a = 1, b = 1, c= 1, d= 1))
summary(model)
AveGrowth = t((1/T)*(log((dataCon[lastYear,2:ncol(dataCon)]/dataCon[initYear,2:ncol(dataCon)]))))
init = t(log(dataCon[initYear,2:ncol(dataCon)]))
employ = t(EmpCon[initYear,-1])
GDP = t(GDPCon[initYear, -1])
model = nls(AveGrowth~a+b*init+c*employ+d*GDP, start = list(a = 1, b = 1, c = 1,d=1))
summary(model)
AveGrowth = t((1/T)*(log((dataGov[lastYear,2:ncol(dataGov)]/dataGov[initYear,2:ncol(dataGov)]))))
init = t(log(dataGov[initYear,2:ncol(dataGov)]))
employ = t(EmpGov[initYear,-1])
GDP = t(GDPCon[initYear, -1])
model = nls(AveGrowth~a+b*init+c*employ+d*GDP, start = list(a = 1, b = 1, c = 1, d= 1))
summary(model)
AveGrowth = t((1/T)*(log((dataGov[lastYear,2:ncol(dataGov)]/dataGov[initYear,2:ncol(dataGov)]))))
init = t(log(dataGov[initYear,2:ncol(dataGov)]))
employ = t(EmpGov[initYear,-1])
GDP = t(GDPGov[initYear, -1])
model = nls(AveGrowth~a+b*init+c*employ+d*GDP, start = list(a = 1, b = 1, c = 1, d= 1))
summary(model)
AveGrowth = t((1/T)*(log((dataMine[lastYear,2:ncol(dataMine)]/dataMine[initYear,2:ncol(dataMine)]))))
init = t(log(dataMine[initYear,2:ncol(dataMine)]))
employ = t(EmpMine[initYear,-1])
GDP = t(GDPMine[initYear, -1])
model = nls(AveGrowth~a+b*init+c*employ+d*GDP, start = list(a = 1, b = 1, c= 1, d = 1))
summary(model)
AveGrowth = t((1/T)*(log((dataOther[lastYear,2:ncol(dataOther)]/dataOther[initYear,2:ncol(dataOther)]))))
init = t(log(dataOther[initYear,2:ncol(dataOther)]))
employ = t(EmpOther[initYear,-1])
GDP = t(GDPOther[initYear, -1])
model = nls(AveGrowth~a+b*init+c*employ+d*GDP, start = list(a = 1, b = 1, c = 1, d= 1))
summary(model)
AveGrowth = t((1/T)*(log((dataTSC[lastYear,2:ncol(dataTSC)]/dataTSC[initYear,2:ncol(dataTSC)]))))
init = t(log(dataTSC[initYear,2:ncol(dataTSC)]))
employ = t(EmpTSC[initYear,-1])
GDP = t(GDPTSC[initYear, -1])
model = nls(AveGrowth~a+b*init+c*employ+GDP, start = list(a = 1, b = 1, c = 1,d=1))
summary(model)
AveGrowth = t((1/T)*(log((dataWhole[lastYear,2:ncol(dataWhole)]/dataWhole[initYear,2:ncol(dataWhole)]))))
init = t(log(dataWhole[initYear,2:ncol(dataWhole)]))
employ = t(EmpWhole[initYear, -1])
GDP =  t(GDPWhole[initYear, -1])
model = nls(AveGrowth~a+b*init+c*employ+d*GDP, start = list(a = 1, b = 1, c= 1, d=1))
summary(model)
growthAgri = diff(log(dataAgri))
setwd("/Users/Lenovo/Desktop/Khazanah/Productivity Convergence")
rm(list = ls(all = T))
library(xlsx)
#Productivity
#Agriculture
dataAgri = read.csv("ag.csv", header = T)
#Manufacturing
dataManu = read.csv("manu.csv", header = T)
#Construction
dataCon = read.csv("construc.csv", header = T)
#Finance
dataFin = read.csv("fin.csv", header = T)
#Government
dataGov = read.csv("gov.csv", header = T)
#Mining
dataMine = read.csv("mine.csv", header = T)
#TSC
dataTSC = read.csv("TSC.csv", header = T)
#Wholesale & retail
dataWhole = read.csv("whole.csv", header = T)
#Other
dataOther = read.csv("other.csv", header = T)
#GDP
#Agriculture
GDPAgri = read.xlsx("agMaster.xlsx", header = F, sheetIndex = 1, startRow = 9,
endRow = 20, colIndex = c(1,seq(2,29)[c(TRUE,FALSE)]))
#Manufacturing
GDPManu = read.xlsx("manuMaster.xlsx", header = F, sheetIndex = 1, startRow = 18,
endRow = 29)
#Construction
GDPCon = read.xlsx("construcMaster.xlsx", header = F, sheetIndex = 1, startRow = 16,
endRow = 27)
#Finance
GDPFin = read.xlsx("finMaster.xlsx", header = F, sheetIndex = 1, startRow = 15,
endRow = 26)
#Government
#dataGov = read.csv("gov.csv", header = T)
#Mining
GDPMine = read.xlsx("mineMaster.xlsx", header = F, sheetIndex = 1, startRow = 15,
endRow = 26)
#TSC
#dataTSC = read.csv("TSC.csv", header = T)
#Wholesale & retail
GDPWhole = read.xlsx("wholeMaster.xlsx", header = F, sheetIndex = 1, startRow = 15,
endRow = 26)
#Other
GDPOther = read.xlsx("otherMaster.xlsx", header = F, sheetIndex = 1, startRow = 15,
endRow = 26)
growthAgri = diff(log(dataAgri))
View(dataAgri)
growthAgri = diff(log(as.numeric(dataAgri)))
growthAgri = log((dataAgri))
View(growthAgri)
View(growthAgri)
year = dataAgri[,1]
growthAgri = dataAgri[,1]
for (i in 2:ncol(dataAgri)){
temp = diff(log(as.numeric(dataAgri[,i])))
growthAgri = c(growthAgri, temp)
}
growthAgri = dataAgri[,1]
for (i in 2:ncol(dataAgri)){
temp = diff(log(as.numeric(dataAgri[,i])))
growthAgri = cbind(growthAgri, temp)
}
View(growthAgri)
warnings(growthAgri)
growthAgri = dataAgri[-1,1]
for (i in 2:ncol(dataAgri)){
temp = diff(log(as.numeric(dataAgri[,i])))
growthAgri = cbind(growthAgri, temp)
}
log(as.numeric(dataAgri[,2]))
colnames(growthAgri) = colnames(dataAgri)
View(growthAgri)
